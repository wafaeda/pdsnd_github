import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }


def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = input('''Which city data would you like to explore? Enter 'chicago', 'new york city', or 'washington':''').lower()
        cities = ['chicago', 'new york city', 'washington']
        if city in cities:
            break
        else:
            print('\nInvalid input.  Please try again.\n')



    # get user input for month (all, january, february, ... , june)
    while True:
        month = input('''Which month would you like to explore? Enter 'january', 'february', 'march', 'april', 'may', 'june', 'all':''').lower()
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        if month == 'all':
            print('\nLets get data for all')
            break

        elif month in months:
            print('\nLets get the data for {}.'.format(month.title()))
            break
        else:
            print('\nInvalid input.  Please try again.\n')


    # get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('''Which day of the week would you like to explore? Enter 'sunday', 'monday', 'tuesday', 'wednesday', 'thursdays', 'friday', 'saturday', 'all':''').lower()
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday',
        'saturday', 'sunday']
        if day == 'all':
            print('\nLets get the data for everyday.')
            break
        elif day in days:
            print('\nLets get the data for all {}s.'.format(day.title()))
            break
        else:
            print('Invalid input.  Please try again.')




    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    df['hour'] = df['Start Time'].dt.hour


    if month != 'all':
        pop_month= df['month'].mode()[0]
        months= ['January','February','March','April','May','June']
        pop_month= months[pop_month-1]
        print("The most Popular month is",pop_month)

    if day != 'all':
        pop_day= df['day_of_week'].mode()[0]
        print("The most Popular day is",pop_day)


    return df

def totals_no_filter(df):
    print('\nNo filter?  Lets calculate some overall statistics first...\n')
    start_time = time.time()

    #Calculate trips per month
    trips_per_month = df['Month'].value_counts()
    print('The following shows the trip count per month:\n')
    for k, v in trips_per_month.iteritems():
        print('{:10} : {:,}'.format(k, v))

    #Calculate trips per days
    trips_per_day = df['Day'].value_counts()
    print('The following shows the trip count per day:\n')
    for k, v in trips_per_day.iteritems():
        print('{:10} : {:,}'.format(k, v))

    print('These calculations took {:.5f} seconds to complete.'.format(time.time() - start_time))

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""
    start_time = time.time()

    # display the most common month
    busiest_month = df['month'].value_counts().idxmax()
    print('The busiest month in this data set is {}.'.format(busiest_month))
    # display the most common day of week
    busiest_day = df['day_of_week'].value_counts().idxmax()
    print('The busiest day in this data set is {}.'.format(busiest_day))
    # display the most common start hour
    busiest_hour = df['hour'].value_counts().idxmax()
    print('The busiest hour in this data set is {}.'.format(busiest_hour))

    print('These calculations took {:.5f} seconds to complete.'.format(time.time() - start_time))
    print('-'*40)

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""
    start_time = time.time()

    # display most commonly used start station
    busiest_start_station = df['Start Station'].mode().to_string(index = False)
    print('The busiest starting station in this data set is {}.'.format(busiest_start_station))

    # display most commonly used end station
    busiest_end_station = df['End Station'].mode().to_string(index = False)
    print('The busiest ending station in this data set is {}.'.format(busiest_end_station))

    # display most frequent combination of start station and end station trip
    stations = df.groupby(['Start Station', 'End Station']).count()
    print('The most common route is between {} and {}.'.format(stations.idxmax()[0][0], stations.idxmax()[0][1]))

    print('These calculations took {:.5f} seconds to complete.'.format(time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    s_sum = df['Trip Duration'].sum()
    print('The total time of all trips in this data set is {:,.0f} seconds.'.format(s_sum))
    print('That is {:,.2f} minutes.'.format(s_sum/60))
    print('That is {:,.2f} hours.'.format(s_sum/60/60))
    print('That is {:,.2f} days.'.format(s_sum/60/60/24))
    # display mean travel time
    s_mean = df['Trip Duration'].mean()
    print('The average time of all trips in this data is {:,.2f} seconds.'.format(s_mean))
    print('That is {:,.2f} minutes.'.format(s_mean/60))

    print('These calculations took {:.5f} seconds to complete.'.format(time.time() - start_time))
    print('-'*40)

def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    u = df['User Type'].value_counts()
    print('The following shows the count of each user type:\n')
    for k, v in u.iteritems():
        print('{:10} : {:,}'.format(k, v))

    # Display counts of gender
    if 'Gender' in df.columns:
        g = df['Gender'].value_counts()
        print('The following shows the count of male and female users:\n')
        for k, v in g.iteritems():
            print('{:7} : {:,}'.format(k, v))

    # Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df.columns:
        earliest_birth_year = int(df['Birth Year'].min())
        print('Our oldest users were born in {:.0f}.'.format(eb))
        if eb < 1900:
            print('Looks like someone entered their date of birth incorrectly.')

        recent_birth_year = int(df['Birth Year'].max())
        print('Our youngest users were born in {:.0f}.'.format(rb))
        if rb > 2011:
            print('Looks like someone entered their date of birth incorrectly.')

        cb = int(df['Birth Year'].mode()[0])
        print('The most common birth year for our users is {:.0f}.'.format(cb))

    print('These calculations took {:.5f} seconds to complete.'.format(time.time() - start_time))
    print('-'*40)

def raw_data(df):

    df = df.drop(['month', 'day_of_week', 'hour'], axis = 1)
    df = df.sort_values(by=['Start Time'])
    df_stacked = df.stack()


    count = 0
    columns = df.shape[1]
    while True:
        r_data = input('''\nWould you like to see some raw data?
Enter yes or no \n''').lower()
        if r_data != 'yes':
            break
        else:
            print(df_stacked[(columns*count*5):(columns*(count*5+5))])
            count += 1

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        if month == 'all' and day == 'all':
            totals_no_filter(df)
            input('\nPress \'enter\' to continue: \n')

        time_stats(df)
        input('\nPress \'enter\' to continue: \n')
        station_stats(df)
        input('\nPress \'enter\' to continue: \n')
        trip_duration_stats(df)
        input('\nPress \'enter\' to continue: \n')
        user_stats(df)
        input('\nPress \'enter\' to continue: \n')

        raw_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n').lower()
        if restart != 'yes':
            break


if __name__ == "__main__":
	main()
